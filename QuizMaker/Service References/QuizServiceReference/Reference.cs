//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.36279
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QuizMaker.QuizServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QuizServiceReference.IAuth")]
    public interface IAuth {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuth/SignIn", ReplyAction="http://tempuri.org/IAuth/SignInResponse")]
        bool SignIn(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuth/SignIn", ReplyAction="http://tempuri.org/IAuth/SignInResponse")]
        System.Threading.Tasks.Task<bool> SignInAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuth/SignUp", ReplyAction="http://tempuri.org/IAuth/SignUpResponse")]
        void SignUp(string name, string last_name, string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuth/SignUp", ReplyAction="http://tempuri.org/IAuth/SignUpResponse")]
        System.Threading.Tasks.Task SignUpAsync(string name, string last_name, string login, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthChannel : QuizMaker.QuizServiceReference.IAuth, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthClient : System.ServiceModel.ClientBase<QuizMaker.QuizServiceReference.IAuth>, QuizMaker.QuizServiceReference.IAuth {
        
        public AuthClient() {
        }
        
        public AuthClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SignIn(string login, string password) {
            return base.Channel.SignIn(login, password);
        }
        
        public System.Threading.Tasks.Task<bool> SignInAsync(string login, string password) {
            return base.Channel.SignInAsync(login, password);
        }
        
        public void SignUp(string name, string last_name, string login, string password) {
            base.Channel.SignUp(name, last_name, login, password);
        }
        
        public System.Threading.Tasks.Task SignUpAsync(string name, string last_name, string login, string password) {
            return base.Channel.SignUpAsync(name, last_name, login, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QuizServiceReference.ITestOperation")]
    public interface ITestOperation {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestOperation/GetTest", ReplyAction="http://tempuri.org/ITestOperation/GetTestResponse")]
        Quiz.QuizServiceReference.Test GetTest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITestOperation/GetTest", ReplyAction="http://tempuri.org/ITestOperation/GetTestResponse")]
        System.Threading.Tasks.Task<Quiz.QuizServiceReference.Test> GetTestAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITestOperationChannel : QuizMaker.QuizServiceReference.ITestOperation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestOperationClient : System.ServiceModel.ClientBase<QuizMaker.QuizServiceReference.ITestOperation>, QuizMaker.QuizServiceReference.ITestOperation {
        
        public TestOperationClient() {
        }
        
        public TestOperationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TestOperationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestOperationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TestOperationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Quiz.QuizServiceReference.Test GetTest() {
            return base.Channel.GetTest();
        }
        
        public System.Threading.Tasks.Task<Quiz.QuizServiceReference.Test> GetTestAsync() {
            return base.Channel.GetTestAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QuizServiceReference.IFileTransfer")]
    public interface IFileTransfer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransfer/UploadFile", ReplyAction="http://tempuri.org/IFileTransfer/UploadFileResponse")]
        string UploadFile(byte[] data, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransfer/UploadFile", ReplyAction="http://tempuri.org/IFileTransfer/UploadFileResponse")]
        System.Threading.Tasks.Task<string> UploadFileAsync(byte[] data, string filename);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileTransferChannel : QuizMaker.QuizServiceReference.IFileTransfer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileTransferClient : System.ServiceModel.ClientBase<QuizMaker.QuizServiceReference.IFileTransfer>, QuizMaker.QuizServiceReference.IFileTransfer {
        
        public FileTransferClient() {
        }
        
        public FileTransferClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileTransferClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string UploadFile(byte[] data, string filename) {
            return base.Channel.UploadFile(data, filename);
        }
        
        public System.Threading.Tasks.Task<string> UploadFileAsync(byte[] data, string filename) {
            return base.Channel.UploadFileAsync(data, filename);
        }
    }
}
